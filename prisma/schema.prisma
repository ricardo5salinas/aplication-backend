generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointment {
  appointment_id      Int                  @id @default(autoincrement())
  date                DateTime             @db.Timestamp(6)
  patient_id          Int
  doctor_id           Int
  payment_id          Int                  @unique
  status              appointment_status   @default(pending)
  medication_id       Int?
  doctor              doctor               @relation(fields: [doctor_id], references: [doctor_id], onDelete: NoAction, onUpdate: NoAction)
  patient             patient              @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)
  payment             payment              @relation(fields: [payment_id], references: [payment_id], onDelete: NoAction, onUpdate: NoAction)
  medication          medication?          @relation(fields: [medication_id], references: [medication_id], onDelete: NoAction, onUpdate: NoAction, map: "medication_id")
  appointment_detail  appointment_detail?
  appointment_history appointment_history?
}

model appointment_detail {
  detail_id                     Int                             @id @default(autoincrement())
  symptoms                      String
  diagnosis                     String
  observations                  String?
  appointment_id                Int                             @unique
  appointment                   appointment                     @relation(fields: [appointment_id], references: [appointment_id], onDelete: NoAction, onUpdate: NoAction)
  appointment_detail_medication appointment_detail_medication[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model appointment_detail_medication {
  detail_medication_id Int                @id @default(autoincrement())
  quantity             Int
  instructions         String
  detail_id            Int
  medication_id        Int
  appointment_detail   appointment_detail @relation(fields: [detail_id], references: [detail_id], onDelete: NoAction, onUpdate: NoAction)
  medication           medication         @relation(fields: [medication_id], references: [medication_id], onDelete: NoAction, onUpdate: NoAction)
}

model appointment_history {
  history_id        Int         @id @default(autoincrement())
  appointment_id    Int         @unique
  general_diagnosis String
  appointment       appointment @relation(fields: [appointment_id], references: [appointment_id], onDelete: NoAction, onUpdate: NoAction)
}

model category {
  category_id Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(100)
  description String?
  medication  medication[]
}

model doctor {
  doctor_id        Int                @id @default(autoincrement())
  user_id          Int                @unique
  license_number   String             @unique @db.VarChar(50)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  appointment      appointment[]
  user             user               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  doctor_specialty doctor_specialty[]
}

model doctor_specialty {
  doctor_specialty_id Int       @id @default(autoincrement())
  specialty_id        Int
  doctor_id           Int
  doctor              doctor    @relation(fields: [doctor_id], references: [doctor_id], onDelete: NoAction, onUpdate: NoAction)
  specialty           specialty @relation(fields: [specialty_id], references: [specialty_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([specialty_id, doctor_id])
}

model medication {
  medication_id                 Int                             @id @default(autoincrement())
  name                          String                          @db.VarChar(500)
  dosage                        String                          @db.VarChar(50)
  category_id                   Int
  appointment                   appointment[]
  appointment_detail_medication appointment_detail_medication[]
  category                      category                        @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  patient_id    Int           @id @default(autoincrement())
  identity_card String        @unique @db.VarChar(9)
  first_name    String        @db.VarChar(30)
  last_name     String        @db.VarChar(30)
  birth_date    DateTime      @db.Date
  phone         String?       @db.VarChar(15)
  address       String?       @db.VarChar(255)
  appointment   appointment[]
}

model payment {
  payment_id        Int            @id @default(autoincrement())
  amount            Decimal        @db.Decimal(10, 2)
  payment_date      DateTime       @db.Date
  payment_method_id Int
  appointment       appointment?
  payment_method    payment_method @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: NoAction, onUpdate: NoAction)
}

model payment_method {
  payment_method_id Int       @id @default(autoincrement())
  name              String    @unique @db.VarChar(50)
  payment           payment[]
}

model role {
  role_id     Int     @id @default(autoincrement())
  role_name   String  @db.VarChar(50)
  description String?
  user        user[]
}

model specialty {
  specialty_id     Int                @id @default(autoincrement())
  specialty_name   String             @unique @db.VarChar(100)
  description      String?
  doctor_specialty doctor_specialty[]
}

model user {
  user_id       Int     @id @default(autoincrement())
  identity_card String  @unique @db.VarChar(9)
  first_name    String  @db.VarChar(100)
  last_name     String  @db.VarChar(100)
  role_id       Int
  email         String  @unique @db.VarChar(100)
  password      String  @db.VarChar(100)
  address       String? @db.VarChar(100)
  phone         String? @db.VarChar(15)
  doctor        doctor?
  role          role    @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
}

enum appointment_status {
  cancelled
  completed
  pending
}
